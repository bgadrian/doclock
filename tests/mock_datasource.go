// Code generated by MockGen. DO NOT EDIT.
// Source: lock.go

// Package tests is a generated GoMock package.
package tests

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	docstore "gocloud.dev/docstore"
)

// MockCollection is a mock of Collection interface.
type MockCollection struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionMockRecorder
}

// MockCollectionMockRecorder is the mock recorder for MockCollection.
type MockCollectionMockRecorder struct {
	mock *MockCollection
}

// NewMockCollection creates a new mock instance.
func NewMockCollection(ctrl *gomock.Controller) *MockCollection {
	mock := &MockCollection{ctrl: ctrl}
	mock.recorder = &MockCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollection) EXPECT() *MockCollectionMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCollection) Delete(ctx context.Context, doc docstore.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCollectionMockRecorder) Delete(ctx, doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCollection)(nil).Delete), ctx, doc)
}

// Get mocks base method.
func (m *MockCollection) Get(ctx context.Context, doc docstore.Document, fps ...docstore.FieldPath) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, doc}
	for _, a := range fps {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCollectionMockRecorder) Get(ctx, doc interface{}, fps ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, doc}, fps...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCollection)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockCollection) Put(ctx context.Context, doc docstore.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockCollectionMockRecorder) Put(ctx, doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCollection)(nil).Put), ctx, doc)
}
