// Code generated by MockGen. DO NOT EDIT.
// Source: leader.go

// Package tests is a generated GoMock package.
package tests

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLeader is a mock of Leader interface.
type MockLeader struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderMockRecorder
}

// MockLeaderMockRecorder is the mock recorder for MockLeader.
type MockLeaderMockRecorder struct {
	mock *MockLeader
}

// NewMockLeader creates a new mock instance.
func NewMockLeader(ctrl *gomock.Controller) *MockLeader {
	mock := &MockLeader{ctrl: ctrl}
	mock.recorder = &MockLeaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeader) EXPECT() *MockLeaderMockRecorder {
	return m.recorder
}

// IsFollower mocks base method.
func (m *MockLeader) IsFollower() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsFollower")
}

// IsFollower indicates an expected call of IsFollower.
func (mr *MockLeaderMockRecorder) IsFollower() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollower", reflect.TypeOf((*MockLeader)(nil).IsFollower))
}

// IsLeader mocks base method.
func (m *MockLeader) IsLeader() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsLeader")
}

// IsLeader indicates an expected call of IsLeader.
func (mr *MockLeaderMockRecorder) IsLeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLeader", reflect.TypeOf((*MockLeader)(nil).IsLeader))
}
